{
  "openapi": "3.1.0",
  "info": {
    "title": "Match Engine API",
    "description": "Match engine service for globers and staff requests suggestions.",
    "version": "1.0"
  },
  "paths": {
    "/api/v1/match/staff-request/{staff_request_id}/globers": {
      "post": {
        "tags": ["Match API"],
        "summary": "Match Globers For Staff Request",
        "description": "Resource for a list of Globers suggestions for a specific Staff Request",
        "operationId": "match_globers_for_staff_request_api_v1_match_staff_request__staff_request_id__globers_post",
        "parameters": [
          {
            "name": "staff_request_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Staff Request Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GloberMatchFilter" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseModel_GloberRecommendation_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageResponseSchema"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/match/glober/{global_id}/staff-requests": {
      "post": {
        "tags": ["Match API"],
        "summary": "Match Staff Requests For Glober",
        "description": "Resource for a list of Staff Requests suggestions for a specific Glober",
        "operationId": "match_staff_requests_for_glober_api_v1_match_glober__global_id__staff_requests_post",
        "parameters": [
          {
            "name": "global_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Global Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffRequestMatchFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseModel_StaffRequestRecommendation_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageResponseSchema"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BaseResponseModel_GloberRecommendation_": {
        "properties": {
          "results": {
            "items": { "$ref": "#/components/schemas/GloberRecommendation" },
            "type": "array",
            "title": "Results"
          }
        },
        "type": "object",
        "required": ["results"],
        "title": "BaseResponseModel[GloberRecommendation]"
      },
      "BaseResponseModel_StaffRequestRecommendation_": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/StaffRequestRecommendation"
            },
            "type": "array",
            "title": "Results"
          }
        },
        "type": "object",
        "required": ["results"],
        "title": "BaseResponseModel[StaffRequestRecommendation]"
      },
      "EmployeeCategoryEnum": {
        "type": "string",
        "enum": ["Full Time Glober"],
        "const": "Full Time Glober",
        "title": "EmployeeCategoryEnum"
      },
      "ErrorMessageResponseSchema": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail",
            "default": "Error message to be displayed to the user"
          }
        },
        "type": "object",
        "title": "ErrorMessageResponseSchema"
      },
      "GloberMatchFilter": {
        "properties": {
          "source": { "$ref": "#/components/schemas/SourceEnum" },
          "aging": {
            "anyOf": [
              { "type": "integer", "minimum": -120.0 },
              { "type": "null" }
            ],
            "title": "Aging",
            "description": "Aging Low Limit"
          },
          "seniority_top": {
            "type": "integer",
            "maximum": 2.0,
            "minimum": 0.0,
            "title": "Seniority Top",
            "description": "Suggests globers up to two positions higher",
            "default": 0
          },
          "seniority_bottom": {
            "type": "integer",
            "maximum": 2.0,
            "minimum": 0.0,
            "title": "Seniority Bottom",
            "description": "Suggests globers up to two positions lower",
            "default": 0
          },
          "employee_category": {
            "anyOf": [
              { "$ref": "#/components/schemas/EmployeeCategoryEnum" },
              { "type": "null" }
            ],
            "description": "Category of employee, restricted to values from Enum"
          },
          "end_date_contract": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "End Date Contract",
            "description": "End date of the contract, if applicable"
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/StatusEnum" },
              { "type": "null" }
            ],
            "description": "Current glober status, restricted to values from Enum"
          }
        },
        "type": "object",
        "required": ["source"],
        "title": "GloberMatchFilter"
      },
      "GloberRecommendation": {
        "properties": {
          "suggestion_id": {
            "type": "integer",
            "title": "Suggestion Id",
            "examples": [180, 4556]
          },
          "match_score": {
            "type": "number",
            "title": "Match Score",
            "examples": [0.84, 0.99]
          },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "examples": [10009, 10020]
          }
        },
        "type": "object",
        "required": ["suggestion_id", "match_score", "user_id"],
        "title": "GloberRecommendation"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "SourceEnum": {
        "type": "string",
        "enum": ["GenoAgent", "OpenCareer", "FindToGlober", "Top3Match"],
        "title": "SourceEnum"
      },
      "StaffRequestMatchFilter": {
        "properties": {
          "source": { "$ref": "#/components/schemas/SourceEnum" },
          "status_sr": {
            "type": "string",
            "title": "Status Sr",
            "description": "Status of the Staff Request",
            "default": "In Progress"
          },
          "plans": {
            "type": "boolean",
            "title": "Plans",
            "description": "SR cannot be suggested if glober has more than 4 plans"
          },
          "plans_high": {
            "type": "boolean",
            "title": "Plans High",
            "description": "SR discarded if glober has a high plan"
          },
          "exist_plan": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Exist Plan",
            "description": "Don't suggest SR if glober already has a plan for SR.",
            "default": false
          },
          "staffing_plan_rejected": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Staffing Plan Rejected",
            "description": "Don't suggest SR, if SR has been rejected by the glober.",
            "default": false
          }
        },
        "type": "object",
        "required": ["source", "plans", "plans_high"],
        "title": "StaffRequestMatchFilter"
      },
      "StaffRequestRecommendation": {
        "properties": {
          "suggestion_id": {
            "type": "integer",
            "title": "Suggestion Id",
            "examples": [180, 4556]
          },
          "match_score": {
            "type": "number",
            "title": "Match Score",
            "examples": [0.84, 0.99]
          },
          "ticket_number": {
            "type": "integer",
            "title": "Ticket Number",
            "examples": [100000, 100001]
          }
        },
        "type": "object",
        "required": ["suggestion_id", "match_score", "ticket_number"],
        "title": "StaffRequestRecommendation"
      },
      "StatusEnum": {
        "type": "string",
        "enum": ["Active"],
        "const": "Active",
        "title": "StatusEnum"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    }
  }
}
